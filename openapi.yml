openapi: 3.0.0
info:
  description: Mozilla's IAM group API
  version: 1.0.0-oas3
  title: Groups
  contact:
    email: fiji@mozilla.com
  license:
    name: MPL 2.0
    url: https://www.mozilla.org/media/MPL/2.0/index.txt
paths:
  "/groups/api/v1/groups":
    post:
      summary: creates a group
      operationId: addGroup
      description: creates a new access group
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
        description: Inventory item to add
      responses:
        "201":
          description: group created
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
    get:
      summary: paginated groups
      description: |
        get paginated list of a groups
      parameters:
        - in: query
          name: f
          description: filter results based on f contained in group name
          required: false
          schema:
            type: string
        - in: query
          name: by
          description: order by
          required: false
          schema:
            type: string
            enum: ["MemberCountAsc", "MemberCountDesc", "NameAsc", "NameDesc"]
            default: "MemberCountDesc"
        - in: query
          name: "n"
          description: next page id (offset)
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: s
          description: size of the result
          required: false
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: a page of members
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: "#/components/schemas/DisplayMember"
                  next:
                    type: integer
                    example: 20
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
  "/groups/api/v1/groups/{groupName}":
    get:
      summary: group information
      operationId: viewGroup
      description: |
        Retrieve information about a given group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "200":
          description: the group information requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    put:
      summary: updates a group
      description: |
        Update information and settings for a given group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdate"
        description: Updates for a existing group
      responses:
        "201":
          description: updates applied
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    delete:
      summary: deletes a group
      description: |
        Deletes a group and all related data
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "201":
          description: group deleted
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/groups/{groupName}/details":
    get:
      summary: detailed group information
      description: Detailed information for group view
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "200":
          description: a page of members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDetails"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
  "/groups/api/v1/terms/{groupName}":
    get:
      summary: group terms
      description: get the terms of condition for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "200":
          description: text of the groups terms in markdown
          content:
            application/json:
              schema:
                type: string
                example: some terms
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    delete:
      summary: delete group terms
      description: delete the terms of condition for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "201":
          description: terms deleted
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    post:
      summary: create group terms
      description: create terms of condition for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: some terms
      responses:
        "201":
          description: terms created
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    put:
      summary: update group terms
      description: update terms of condition for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: some terms
      responses:
        "201":
          description: terms updated
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/requests/{groupName}":
    get:
      summary: group invitation requests
      description: get invitation requests for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "200":
          description: list of invitation requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Request"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/requests/{groupName}/{userUuid}":
    delete:
      summary: reject an invitation request
      description: reject an invitation request for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: path
          name: userUuid
          description: user uuid of invitation request to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: invitation request deleted
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/invitations/{groupName}":
    get:
      summary: group invitations
      description: get invitations for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "200":
          description: list of invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    post:
      summary: invite a member
      description: invite a member to a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  type: string
                  format: uuid
                  example: 34a33a8e-d035-4051-acac-497a79235e73
                invitation_expiration:
                  description: expiration period in days
                  type: integer
                  example: 5
                group_expiration:
                  description: expiration period in days
                  type: integer
                  example: 180
      responses:
        "201":
          description: member invited
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/invitations/{groupName}/{userUuid}":
    put:
      summary: update an invitation
      description: update invitation of a user
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: path
          name: userUuid
          description: user uuid of invitation to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invitation_expiration:
                  description: expiration period in days
                  type: integer
                  example: 5
                group_expiration:
                  description: expiration period in days
                  type: integer
                  example: 180
      responses:
        "201":
          description: invitation updated
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    delete:
      summary: delete an invitation
      description: delete an invitation for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: path
          name: userUuid
          description: user uuid of invitation to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: invitation deleted
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/members/{groupName}/{memberUuid}/renew":
    post:
      summary: renew a member
      description: renew a member for a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: path
          name: memberUuid
          description: pass in the uuid of the member to renew
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group_expiration:
                  description: expiration period in days
                  type: integer
                  example: 180
      responses:
        "201":
          description: member renewed
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/members/{groupName}/{memberUuid}":
    delete:
      summary: delete a member
      description: delete a member of a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: path
          name: memberUuid
          description: pass in the uuid of the member to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: member deleted
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/members/{groupName}":
    get:
      summary: paginated members
      description: |
        get paginated members of a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: query
          name: r
          description: filter results based on role
          required: false
          schema:
            type: string
            enum: [Any, Member, Curator]
            default: Any
        - in: query
          name: q
          description: search query to filter results
          required: false
          schema:
            type: string
        - in: query
          name: s
          description: number of results
          required: false
          schema:
            type: integer
            default: 20
        - in: query
          name: "n"
          description: next results token
          required: false
          schema:
            type: integer
        - in: query
          name: by
          description: sort by
          required: false
          schema:
            type: string
            enum: [None, ExpirationAsc, ExpirationDesc, RoleAsc, RoleDesc]
            default: None
      responses:
        "200":
          description: a page of members
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      $ref: "#/components/schemas/DisplayMember"
                  next:
                    type: integer
                    example: 20
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
  "/groups/api/v1/curators/{groupName}":
    post:
      summary: add a curator
      description: add a curator to a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - member_uuid
              properties:
                member_uuid:
                  type: string
                  format: uuid
                  example: 34a33a8e-d035-4051-acac-497a79235e73
      responses:
        "201":
          description: curator added
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/curators/{groupName}/{memberUuid}/downgrade":
    post:
      summary: downgrade a curator to a normal member
      description: downgrade a curator to a normal member
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: path
          name: memberUuid
          description: pass in the uuid of the curator to downgrade
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group_expiration:
                  type: integer
                  example: 90
                  description: group expiration for membership
      responses:
        "201":
          description: curator deleted
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/users":
    get:
      summary: search for users
      description: |
        get top matches of users
      parameters:
        - in: query
          name: q
          description: search query to filter results
          required: true
          schema:
            type: string
          example: Han
        - in: query
          name: g
          description: group name to filter out members / invitees
          required: true
          schema:
            type: string
          example: some-group-name
        - in: query
          name: t
          description: trust filter for results
          required: false
          schema:
            $ref: "#/components/schemas/TrustType"
          example: Ndaed
        - in: query
          name: c
          description: search for potential curators (requires g to be set)
          required: false
          schema:
            type: string
          example: true
        - in: query
          name: a
          description: do not filter based on membership status
          required: false
          schema:
            type: string
          example: true
      responses:
        "200":
          description: the top matches of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  "/groups/api/v1/users/any":
    get:
      summary: search for any users
      description: |
        get top matches of any users
      parameters:
        - in: query
          name: q
          description: search query to filter results
          required: true
          schema:
            type: string
          example: Han
        - in: query
          name: t
          description: trust filter for results
          required: true
          schema:
            $ref: "#/components/schemas/TrustType"
          example: Ndaed
        - in: query
          name: l
          description: limit result set
          required: true
          schema:
            type: number
          example: 5
      responses:
        "200":
          description: the top matches of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  "/groups/api/v1/self/{groupName}":
    delete:
      summary: leave a group
      description: leave a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
        - in: query
          name: force
          description: force leaving the group
          required: false
          schema:
            type: boolean
      responses:
        "201":
          description: left group
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/self/requests":
    get:
      summary: invitation requests from the logged in user
      description: get all invitation requests from the logged in user
      responses:
        "200":
          description: list of invitation requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MyRequest"
  "/groups/api/v1/self/requests/{groupName}":
    post:
      summary: request to be invited
      description: request to be invited
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "201":
          description: requested
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    delete:
      summary: cancel a request to be invited
      description: cancel a request to be invited
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "201":
          description: canceled
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/self/invitations":
    get:
      summary: invitations for the logged in user
      description: get all invitations for the logged in user
      responses:
        "200":
          description: list of invitations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MyInvitation"
  "/groups/api/v1/self/invitations/{groupName}":
    delete:
      summary: reject an invitation to a group
      description: reject an invitation to a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      responses:
        "201":
          description: rejected invitation
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
    post:
      summary: join a group
      description: join a group
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: joining status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [pending, joined]
                    example: joined
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
  "/groups/api/v1/sudo/member/{groupName}":
    post:
      summary: add a member
      description: add a member to a group (admins only)
      parameters:
        - in: path
          name: groupName
          description: pass in the group name to interact with
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  type: string
                  format: uuid
                  example: 34a33a8e-d035-4051-acac-497a79235e73
                group_expiration:
                  description: expiration period in days
                  type: integer
                  example: 180
      responses:
        "201":
          description: member added
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "403":
          description: operation forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "406":
          description: not acceptable
servers:
  - url: http://localhost:8085
components:
  schemas:
    GenericError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: Group name exists
    Group:
      type: object
      required:
        - id
        - name
        - type
        - description
      properties:
        name:
          type: string
          example: dinopark-test
        type:
          type: string
          enum:
            - closed
            - reviewed
            - open
          example: closed
        description:
          type: string
          example: some fancy description in markdown
    GroupWithTerms:
      type: object
      required:
        - name
        - type
        - description
      properties:
        name:
          type: string
          example: dinopark-test
        type:
          type: string
          enum:
            - closed
            - reviewed
            - open
          example: closed
        description:
          type: string
          example: some fancy description in markdown
        expiration:
          type: integer
          example: 90
        created:
          type: string
          format: datetime
          example: 2014-11-28T12:45:59Z
        terms:
          type: boolean
          example: true
    NewGroup:
      type: object
      required:
        - type
        - description
      properties:
        name:
          type: string
          example: dinos
        type:
          type: string
          enum:
            - closed
            - reviewed
            - open
          example: closed
        description:
          type: string
          example: some fancy description in markdown
        group_expiration:
          type: integer
          description: period in days after which a membership expires (0 for never)
          example: 90
    GroupUpdate:
      type: object
      properties:
        type:
          type: string
          enum:
            - closed
            - reviewed
            - open
          example: reviewed
        description:
          type: string
          example: another description in markdown
        group_expiration:
          type: integer
          description: period in days after which a membership expires (0 for never)
          example: 90
    TrustType:
      type: string
      enum: ["Public", "Authenticated", "Vouched", "Ndaed", "Staff"]
    AnyUser:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        picture:
          type: string
          nullable: true
          example: https://picture.api.dev.sso.allizom.org/avatar/get/id/MzI0ZjAwMzA5Yzc1ZGYxYmIzYjdjMGE1NWZmMDc3OGY3NGJjYjAzMjc0NDVhZmI2YWViODBmMzIzOGNhYzM3NyNzdGFmZiMxNTcyODYyNzM3.png
        first_name:
          type: string
          nullable: true
          example: Hans
        last_name:
          type: string
          nullable: true
          example: Knall
        username:
          type: string
          example: hans
        email:
          type: string
          format: email
          nullable: true
          example: hans@knall.org
        trust:
          $ref:  "#/components/schemas/TrustType"
    User:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        picture:
          type: string
          nullable: true
          example: https://picture.api.dev.sso.allizom.org/avatar/get/id/MzI0ZjAwMzA5Yzc1ZGYxYmIzYjdjMGE1NWZmMDc3OGY3NGJjYjAzMjc0NDVhZmI2YWViODBmMzIzOGNhYzM3NyNzdGFmZiMxNTcyODYyNzM3.png
        first_name:
          type: string
          nullable: true
          example: Hans
        last_name:
          type: string
          nullable: true
          example: Knall
        username:
          type: string
          example: hans
        email:
          type: string
          format: email
          nullable: true
          example: hans@knall.org
        trust:
          $ref:  "#/components/schemas/TrustType"
        role:
          type: string
          enum:
            - Admin
            - Curator
            - Member
          nullable: true
          example: Member
        invited:
          type: boolean
          example: false
    DisplayMember:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        picture:
          type: string
          nullable: true
          example: https://picture.api.dev.sso.allizom.org/avatar/get/id/MzI0ZjAwMzA5Yzc1ZGYxYmIzYjdjMGE1NWZmMDc3OGY3NGJjYjAzMjc0NDVhZmI2YWViODBmMzIzOGNhYzM3NyNzdGFmZiMxNTcyODYyNzM3.png
        first_name:
          type: string
          nullable: true
          example: Hans
        last_name:
          type: string
          nullable: true
          example: Knall
        username:
          type: string
          example: hans
        email:
          type: string
          format: email
          nullable: true
          example: hans@knall.org
        is_staff:
          type: boolean
          example: true
        since:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        expiration:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        role:
          type: string
          enum:
            - Admin
            - Curator
            - Member
        added_by:
          $ref: "#/components/schemas/AddedBy"
    MyInvitation:
      type: object
      properties:
        group_name:
          type: string
          example: dinos
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        invitation_expiration:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        group_expiration:
          type: integer
          nullable: true
          example: 90
          description: days after which membership will expire
        terms:
          type: boolean
          example: true
        added_by:
          $ref: "#/components/schemas/AddedBy"
    MyRequest:
      type: object
      properties:
        group_name:
          type: string
          example: dinos
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        created:
          type: string
          format: datetime
          example: 2014-11-28T12:45:59Z
        request_expiration:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        terms:
          type: boolean
          example: true
    Request:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        picture:
          type: string
          nullable: true
          example: https://picture.api.dev.sso.allizom.org/avatar/get/id/MzI0ZjAwMzA5Yzc1ZGYxYmIzYjdjMGE1NWZmMDc3OGY3NGJjYjAzMjc0NDVhZmI2YWViODBmMzIzOGNhYzM3NyNzdGFmZiMxNTcyODYyNzM3.png
        first_name:
          type: string
          nullable: true
          example: Hans
        last_name:
          type: string
          nullable: true
          example: Knall
        username:
          type: string
          example: hans
        email:
          type: string
          format: email
          nullable: true
          example: hans@knall.org
        is_staff:
          type: boolean
          example: true
        created:
          type: string
          format: datetime
          example: 2014-11-28T12:45:59Z
        request_expiration:
          type: integer
          nullable: true
          example: 90
          description: days after which membership will expire
        group_name:
          type: string
          example: test-group
        terms:
          type: boolean
          example: false
    Invitation:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        picture:
          type: string
          nullable: true
          example: https://picture.api.dev.sso.allizom.org/avatar/get/id/MzI0ZjAwMzA5Yzc1ZGYxYmIzYjdjMGE1NWZmMDc3OGY3NGJjYjAzMjc0NDVhZmI2YWViODBmMzIzOGNhYzM3NyNzdGFmZiMxNTcyODYyNzM3.png
        first_name:
          type: string
          nullable: true
          example: Hans
        last_name:
          type: string
          nullable: true
          example: Knall
        username:
          type: string
          example: hans
        email:
          type: string
          format: email
          nullable: true
          example: hans@knall.org
        is_staff:
          type: boolean
          example: true
        invitation_expiration:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        group_expiration:
          type: integer
          nullable: true
          example: 90
          description: days after which membership will expire
        group_name:
          type: string
          example: test-group
        terms:
          type: boolean
          example: false
        added_by:
          $ref: "#/components/schemas/AddedBy"
    AddedBy:
      type: object
      properties:
        user_uuid:
          type: string
          example: 34a33a8e-d035-4051-acac-497a79235e73
        first_name:
          type: string
          nullable: true
          example: Hans
        last_name:
          type: string
          nullable: true
          example: Knall
        username:
          type: string
          nullable: true
          example: hans
        email:
          type: string
          format: email
          nullable: true
          example: hans@knall.org
    Membership:
      type: object
      properties:
        user_uuid:
          type: string
          format: uuid
          example: 34a33a8e-d035-4051-acac-497a79235e73
        since:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        expiration:
          type: string
          format: datetime
          nullable: true
          example: 2014-11-28T12:45:59Z
        role:
          type: string
          enum:
            - Admin
            - Curator
            - Member
        added_by:
          $ref: "#/components/schemas/AddedBy"
    GroupDetails:
      type: object
      properties:
        membership:
          $ref: "#/components/schemas/Membership"
        super_user:
          type: boolean
          example: false
        curator:
          type: boolean
          example: true
        member:
          type: boolean
          example: true
        group:
          $ref: "#/components/schemas/GroupWithTerms"
        member_count:
          type: integer
          example: 50
        invitation_count:
          nullable: true
          type: integer
          example: 2
        renewal_count:
          nullable: true
          type: integer
          example: 3
        request_count:
          nullable: true
          type: integer
          example: 1
